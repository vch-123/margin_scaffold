using EdgeSideProgramScaffold.Client;
using EdgeSideProgramScaffold.Service.FuncServices;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EdgeSideProgramScaffold.Service.BackgroundServices
{
    internal class PLCReaderBackgroundService : BackgroundService
    {
        private readonly UDPClient _udpClient;
        private readonly CacheService _cacheService;
        private readonly TagOperator _tagOperator;
        private readonly ConfigService _configService;
        public PLCReaderBackgroundService(UDPClient uDPClient, CacheService cacheService, TagOperator tagOperator, ConfigService configService)
        {
            _udpClient = uDPClient;
            _cacheService = cacheService;
            _tagOperator = tagOperator;
            _configService = configService;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {

            //byte[] data =
            //{
            //    0x64,0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            //    0x00,0x00,0x00,0x00,0x00
            //};
            //_tagOperator.OperateExcelModel(data);



            while (true)
            {
                byte[] data =
                {
                    0x00, 0x14, 0x00, 0x00, 0x44, 0x4F, 0x7C, 0x80, 0x45, 0x4C, 0xBF, 0x05, 0x41, 0x80, 0xFA, 0xF8, 0x45, 0xB3, 0x47, 0xFB,
                    0x46, 0x73, 0xE8, 0x21, 0x45, 0xF6, 0xC0, 0x8A, 0x45, 0xFC, 0x97, 0x3B, 0x46, 0x2C, 0xE1, 0x2D, 0x46, 0x39, 0xB7, 0xC5,
                    0x46, 0x8D, 0xED, 0xAB, 0x46, 0xFC, 0xE3, 0x52, 0x46, 0xF9, 0xE9, 0x6B, 0x44, 0x85, 0x58, 0xDA, 0x3E, 0xAA, 0x4D, 0xC6,
                    0x43, 0x0A, 0x75, 0xA2, 0x44, 0xF4, 0xC1, 0xF4, 0x44, 0xEC, 0xEC, 0x9B, 0x40, 0x0C, 0xD6, 0xF3, 0x42, 0x4A, 0xAB, 0x18,
                    0x40, 0x5D, 0x55, 0x83, 0x42, 0x64, 0x5A, 0x00, 0x42, 0x87, 0x32, 0x55, 0x42, 0x9E, 0x4C, 0xE0, 0x42, 0x7A, 0x97, 0x0F,
                    0x42, 0x9B, 0x49, 0xC6, 0x41, 0x3D, 0x67, 0xC6, 0x42, 0xA6, 0xE1, 0x4C, 0x42, 0xAD, 0xF2, 0x1C, 0x42, 0x85, 0xBC, 0x24,
                    0x3F, 0xD3, 0x4E, 0x76, 0x42, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x42, 0xB5, 0x66, 0x66, 0x42, 0xCA, 0x00, 0x00, 0x41, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x42, 0x1A, 0x66, 0x66, 0x42, 0x2E, 0xCC, 0xCD, 0x42, 0x6E, 0xCC, 0xCD, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x7A, 0x39, 0x9A, 0x45, 0x9C, 0x47, 0x1F, 0x46, 0x1C, 0x42, 0x9A,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x14, 0x27, 0x00
                };
                _tagOperator.OperateExcelModel(data);
                await Task.Delay(200);
            }




            _udpClient.SetCallback((s, e) =>
            {
                try
                {
                    _tagOperator.OperateExcelModel(s);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error! {ex}");
                }
                if (_configService.PrintSuccess == 1)
                {
                    Console.WriteLine("SUCCESS");
                }
            });
        }
    }
}
